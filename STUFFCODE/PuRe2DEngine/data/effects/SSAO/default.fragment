#version 330 core

#define KERNEL_SIZE 16
uniform sampler2D NormalMap;
uniform sampler2D DepthMap;
uniform sampler2D NoiseTexture;
uniform vec2 NoiseScale;

uniform vec2 Resolution;

uniform mat4 InvertViewProjection;
uniform mat4 CamView;

uniform float g_sample_rad = 0.05;
uniform float g_intensity = 2.0;
uniform float g_scale = 0.1;
uniform float g_bias = 0.1;

vec2 CalcTexCoord()
{
    return gl_FragCoord.xy / Resolution;
}

vec3 getPosition(vec2 uv)
{
    vec4 worldpos;

    float depth = texture2D(DepthMap, uv).r;

    worldpos.x = uv.x * 2.0f - 1.0f;

    worldpos.y = uv.y * 2.0f - 1.0f;

    worldpos.z = depth  * 2.0f - 1.0f;

    worldpos.w = 1.0;

    worldpos = InvertViewProjection * worldpos;

    worldpos /= worldpos.w;

    return worldpos.rgb;
}

vec3 getNormal(vec2 uv)
{
    return normalize(texture2D(NormalMap, uv).xyz * 2.0f - 1.0f);
}

vec2 getRandom(vec2 uv)
{
    return normalize(texture2D(NoiseTexture, Resolution*uv / NoiseScale).xy * 2.0f - 1.0f);
}

float doAmbientOcclusion(in vec2 tcoord, in vec2 uv, in vec3 p, in vec3 cnorm)
{
    vec3 diff = getPosition(tcoord+uv) - p;
    vec3 v = normalize(diff);
    float d = length(diff)*g_scale;

    return max(0.0, dot(cnorm, v) - g_bias)*(1.0 / (1.0 + d))*g_intensity;
}



void main()
{
	vec4 Kernels[KERNEL_SIZE] =
	vec4[](
		vec4(0.355512, 	-0.709318, 	-0.102371,	0.0 ),
		vec4(0.534186, 	0.71511, 	-0.115167,	0.0 ),
		vec4(-0.87866, 	0.157139, 	-0.115167,	0.0 ),
		vec4(0.140679, 	-0.475516, 	-0.0639818,	0.0 ),
		vec4(-0.0796121, 	0.158842, 	-0.677075,	0.0 ),
		vec4(-0.0759516, 	-0.101676, 	-0.483625,	0.0 ),
		vec4(0.12493, 	-0.0223423,	-0.483625,	0.0 ),
		vec4(-0.0720074, 	0.243395, 	-0.967251,	0.0 ),
		vec4(-0.207641, 	0.414286, 	0.187755,	0.0 ),
		vec4(-0.277332, 	-0.371262, 	0.187755,	0.0 ),
		vec4(0.63864, 	-0.114214, 	0.262857,	0.0 ),
		vec4(-0.184051, 	0.622119, 	0.262857,	0.0 ),
		vec4(0.110007, 	-0.219486, 	0.435574,	0.0 ),
		vec4(0.235085, 	0.314707, 	0.696918,	0.0 ),
		vec4(-0.290012, 	0.0518654, 	0.522688,	0.0 ),
		vec4(0.0975089, 	-0.329594, 	0.609803,	0.0 )

	);
    vec2 uv = CalcTexCoord(); //same as UV Coordinate from Vertex
    vec3 p = getPosition(uv);
    vec3 n = getNormal(uv);
    vec2 rand = getRandom(uv);
    
    vec4 viewpos = CamView * vec4(p,1);
    float ao = 0.0f;
    float rad = g_sample_rad/viewpos.z;

    for (int j = 0; j < KERNEL_SIZE; ++j)
    {
        vec2 coord = reflect(Kernels[j].xy, rand)*rad;
        ao += doAmbientOcclusion(uv, coord, p, n);
    }
    ao /= KERNEL_SIZE;

    ao = 1 - (ao);
    gl_FragColor = vec4(ao,ao,ao, 1);
}